def print_3x3keyboard(key_pass_array) # eg, [2, 5, 8, 9, 6, 3]
  # group array into a hash: { 2 => [..], 1 => [..], 0 => [..] }
  # representing 3 colums on the 3x3 keyboard
  grouped_keys = key_pass_array.sort.group_by { |n| n % 3 }

  (1..9).each_slice(3) do |keys|
    str = ''

    keys.each do |k|
      op = grouped_keys[k % 3]&.include?(k) ? "#{k} " : "* " # &. is same as .try
      str += op
    end

    puts str
  end
end

# Problem: in a 3 x 3 keyboard, given a starting point (any number between 1 to 9)
# find one of the possible combinations generated by gesture w/ given length(<= 9)
#
# basic rules:
# numbers must be adjecent and unique, eg, (1,2,3,6)、(4,7,8,5,3)
# numbers that key 1 can reach with gesture are: 2, 4, 5
# numbers that key 2 can reach with gesture are: 1, 3, 4, 5, 6
# numbers that key 3 can reach with gesture are: 2, 5, 6
# ...
#
# Solution 1: define basic rules in a key -> value hash
KEYS_HASH = {
  1 => [2, 4, 5],
  2 => [1, 3, 4, 5, 6],
  3 => [2, 5, 6],
  4 => [1, 2, 5, 7, 8],
  5 => [1, 2, 3, 4, 6, 7, 8, 9],
  6 => [2, 3, 5, 8, 9],
  7 => [4, 5, 8],
  8 => [4, 5, 6, 7, 9],
  9 => [5, 6, 8]
}

# TODO: SHOULD allow cross selected key, eg 2 -> 5 -> 8 -> 6 -> 4
def get_gesture_hsh(start_key, key_length)
  result = [start_key]

  while result.length < key_length
    key = KEYS_HASH[result[-1]].sample

    redo if result.include?(key)

    result << key
  end

  result
end

puts "Solution 1, use a hash of keys to define basic rules:"
key_pass_hsh = get_gesture_hsh(2, 6)
puts "printing sequence and keyboard..."
puts key_pass_hsh.join " -> "
print_3x3keyboard key_pass_hsh

puts

# Solution 2: store key combinations in an array
KEYS_ARRAY=[
  [[1,2],[1,4],[1,5]],
  [[2,1],[2,3],[2,4],[2,5],[2,6]],
  [[3,2],[3,5],[3,6]],
  [[4,1],[4,2],[4,5],[4,7],[4,8]],
  [[5,1],[5,2],[5,3],[5,4],[5,6],[5,7],[5,8],[5,9]],
  [[6,3],[6,5],[6,8],[6,9],[6,2]],
  [[7,4],[7,5],[7,8]],
  [[8,7],[8,9],[8,4],[8,5,],[8,6]],
  [[9,6],[9,5],[9,8]]
]

def get_gesture_ary(start_key, key_length)
  result = [start_key]

  while result.length < key_length
    key = KEYS_ARRAY[result[-1] - 1].sample[1]

    redo if result.include?(key)

    result << key
  end

  result
end

puts "Solution 2, use an array of keys to define basic rules:"
key_pass_ary = get_gesture_ary(2, 6)
puts "printing sequence and keyboard..."
puts key_pass_ary.join " -> "
print_3x3keyboard key_pass_ary

